heat_template_version: 2013-05-23
# Author: Henri Alakoski
# Date: 27/01/2017

description: Demo - create basic network setup, security group rules, floating ip and use cloud-init to install some apps.

# before running this heat stack u need to do these
#
# pip install python-openstackclient python-neutronclient
#

# $ cat k5-customer-project.rc
#
# export OS_USERNAME=XXXXXXXXXXXXX-username-XXXXXXXXXXX
# export OS_PASSWORD=XXXXXXXXXXXXX-passwd-XXXXXXXXXXXX
# export OS_PROJECT_NAME=XXXXXXXXXX-project-name-XXXXXXX   check eg. from web portal
# export OS_PROJECT_ID=XXXXXXXX-project-id-XXXXXXXXX       check eg. from web portal
# export OS_AUTH_URL=https://identity.fi-1.cloud.global.fujitsu.com/v3
# export OS_REGION_NAME=fi-1
# export OS_VOLUME_API_VERSION=2
# export OS_IDENTITY_API_VERSION=3
# export OS_USER_DOMAIN_NAME=XXXXX-contract-id-XXXXXXX
# export OS_DEFAULT_DOMAIN=XXXXXX-contract-id-XXXXXXXX



# source k5-customer-project.rc
# openstack keypair create customer-key-1 > customer-key-1.pem
# neutron router-create router01
# neutron router-gateway-set router01 inf_az1_ext-net01
# neutron router-list

# !!CHECK change router id in "input parameters" -section

# openstack stack create -t customer-heat-template-20170127.yaml customer-heat-1
# openstack stack list

# when complete u can "ssh -l k5user -i customer-key-1.pm <vm-server-ip>
# to check vm-server-ip use "openstack server list" command


# Input parameters
parameters:
  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: "CentOS 7.2 64bit (English) 01"
  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: "customer-key-1"
  public_net:
    type: string
    label: external network ID
    description: Public network
    default: "42d80316-c2e5-4628-b63b-6e87b3749220"
  private_net1_name:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    default: "private-net1"
  private_net1_cidr:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    default: "10.10.10.0/24"
  az:
    type: string
    label: Availability Zone
    description: Region AZ to use
    default: "fi-1a"
# You need to change router id to point your own router that u created with "neutron router-create router01"
# use "neutron router-list" to check router id
  ext_router:
    type: string
    label: External Router
    description: Router with external access for global ip allocation
    default: "40c18d86-2882-4661-b81a-f4ff5c5cd3d0"


# K5 Infrastructure resources to be built
resources:

  # Create a new private network
  private_net1:
    type: OS::Neutron::Net
    properties:
      availability_zone: { get_param: az }
      name: { get_param: private_net1_name }

  # Create a new subnet on the private network
  private_net1-subnet:
    type: OS::Neutron::Subnet
    depends_on: private_net1
    properties:
      availability_zone: { get_param: az }
      name: private_net1-subnet
      network_id: { get_resource: private_net1 }
      cidr: { get_param: private_net1_cidr }
      dns_nameservers:
        - 213.214.162.9
        - 213.214.162.10

  # Connect an interface on the private network's subnet to the router
  router_interface1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_param: ext_router }
      subnet_id: { get_resource: private_net1-subnet }

  # Create a new port for the server interface, assign an ip address and security group
  server1_port:
    type: OS::Neutron::Port
    depends_on: [ router_interface1,server_security_group1 ]
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: private_net1 }
      security_groups: [{ get_resource: server_security_group1 }]

  # Allocate a floating/global ip address
  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [router_interface1]
    properties:
      availability_zone: { get_param: az }
      floating_network_id: { get_param: public_net }

  # Assign a floating/global ip address to the fixed server ip address
  server1_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: server1_floating_ip
    properties:
      floatingip_id: { get_resource: server1_floating_ip }
      port_id: { get_resource: server1_port }

  # Create a security group
  server_security_group1:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: customerSG
      rules:
#        - remote_ip_prefix: x.x.x.x/18
#          protocol: tcp
#          port_range_min: 22
#          port_range_max: 22
#        - remote_ip_prefix: x.x.x.x/18
#          protocol: tcp
#          port_range_min: 80
#          port_range_max: 80
#        - remote_ip_prefix: x.x.x.x/18
#          protocol: tcp
#          port_range_min: 443
#          port_range_max: 443
#        - remote_ip_prefix: x.x.x.x/18
#          protocol: tcp
#          port_range_min: 8080
#          port_range_max: 8080
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  # Create a system volume for use with the server
  sys-vol_server1:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name: "boot-vol"
      size: 30
      volume_type: "M1"
      image : { get_param: image }

   # Create a data volume for use with the server
  data_vol_server1:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      description: Data volume
      name: "data-vol"
      size: 100
      volume_type: "M1"

  # Build a server using the system volume defined above
  server1:
    type: OS::Nova::Server
    depends_on: [ server1_port,server1_floating_ip ]
    properties:
      key_name: { get_param: key }
      image: { get_param: image }
      flavor: S-2
      admin_user: k5user
      block_device_mapping: [{"volume_size": "30", "volume_id": {get_resource: sys-vol_server1}, "delete_on_termination": True, "device_name": "/dev/vda"}]
      name: "customer-vm-1"
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
              - content: |
                  #!/bin/bash
                  voldata_id=%voldata_id%
                  voldata_dev="/dev/disk/by-id/virtio-$(echo ${voldata_id} | cut -c -20)"
                  mkfs.ext4 ${voldata_dev}
                  mkdir -pv /mnt/appdata
                  echo "${voldata_dev} /mnt/appdata ext4 defaults 1 2" >> /etc/fstab
                  mount /mnt/appdata
                  chmod 0777 /mnt/appdata
                path: /tmp/format-disks
                permissions: '0700'
            runcmd:
              - /tmp/format-disks
              - yum clean all
              - yum update -y
              - yum install wget -y
              - wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
              - rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
              - yum install java -y
              - yum install java-1.8.0-openjdk-devel -y
              - yum install jenkins -y
              - yum install httpd -y


          params:
            "%voldata_id%": { get_resource: data_vol_server1 }
      user_data_format: RAW
      networks:
        - port: { get_resource: server1_port }

   # Attach previously defined data-vol to the server
  attach_vol1:
    type: OS::Cinder::VolumeAttachment
    depends_on: [ data_vol_server1, server1 ]
    properties:
      instance_uuid: {get_resource: server1}
      mountpoint: "/dev/vdb"
      volume_id: {get_resource: data_vol_server1}
